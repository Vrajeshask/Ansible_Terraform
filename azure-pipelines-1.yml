# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: Default

steps:
#- task: Bash@3
#  inputs:
#    targetType: 'inline'
#    script: 'ssh-keygen -t rsa -b 4096 -C "your_email@example.com" -f /home/patelvrajeshazure/.ssh/id_rsa -y'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      pwd
      ls

- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '/home/patelvrajeshazure/myagent/_work/1/s'
    backendServiceArm: 'Azure subscription 1(fd5d4633-e73f-4617-85ec-530631b1d79f)'
    backendAzureRmResourceGroupName: 'terraform'
    backendAzureRmStorageAccountName: 'terraformncpl'
    backendAzureRmContainerName: 'tffiles'
    backendAzureRmKey: 'ansible.tfstate'
- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '/home/patelvrajeshazure/myagent/_work/1/s'
    environmentServiceNameAzureRM: 'Azure subscription 1(fd5d4633-e73f-4617-85ec-530631b1d79f)'

- task: TerraformTaskV4@4
  displayName: 'Run out'
  inputs:
    provider: 'azurerm'
    command: 'custom'
    customCommand: 'output'
    commandOptions: '-json'
    outputTo: 'file'
    fileName: 'new'
    environmentServiceNameAzureRM: 'Azure subscription 1(fd5d4633-e73f-4617-85ec-530631b1d79f)'
    
- script: |
    terraform output -json public_ip_address > terraform_output.json
  displayName: 'Run Terraform Output'

- task: CmdLine@2
  inputs:
    script: |
      ls
      add_to_inventory.py
- task: Ansible@0
  inputs:
    ansibleInterface: 'agentMachine'
    playbookPathOnAgentMachine: '/home/patelvrajeshazure/myagent/_work/1/s/ansible.yaml'
    inventoriesAgentMachine: 'file'
    inventoryFileOnAgentMachine: '/home/patelvrajeshazure/myagent/_work/1/s/inventory.ini'